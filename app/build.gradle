plugins {
    id 'com.android.application'

    id 'com.palantir.git-version' version '0.11.0'
    id 'com.github.triplet.play' version '2.1.0'

    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 29
    ndkVersion "21.3.6528147"

    buildFeatures {
        viewBinding true
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
    }

    defaultConfig {
        applicationId "com.kanedias.dybr.fair"
        targetSdkVersion 29 // device you test on
        minSdkVersion 21    // device you allow your users to be on :)
        versionCode 116
        versionName "1.27.6"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file('misc/signing.keystore')
            storePassword System.getenv('SIGNING_KEYSTORE_PASSWORD')
            keyAlias 'release-key'
            keyPassword System.getenv('RELEASE_KEY_PASSWORD')
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    flavorDimensions "purity"
    productFlavors {
        fdroid {
            dimension "purity"
        }

        googleplay {
            dimension "purity"
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            universalApk false
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // user-supplied code
            def versionCode = android.defaultConfig.versionCode

            // code based on ABI
            def versionCodes = ['universal': 0, 'armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]
            int abiVersionCode = versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI) ?: 'universal')

            // code based on track
            def gitVersionCode = versionDetails().commitDistance

            // production code should be higher than alpha so it can substitute it on release publish
            // (google play requirement)
            def playVersionCode = 0
            switch (play.track) {
                case 'internal': playVersionCode = 1; break
                case 'alpha': playVersionCode = 2; break
                case 'beta': playVersionCode = 3; break
                case 'production': playVersionCode = 4; break
            }

            output.versionCodeOverride = versionCode * 10000 + playVersionCode * 1000 + gitVersionCode * 10 + abiVersionCode
            output.versionNameOverride = gitVersion().replace('.dirty', '')
        }
    }
}

play {
    serviceAccountCredentials = file('misc/android-publisher-account.json')
    track = project.hasProperty('releaseType') ? project.property('releaseType') : 'alpha'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"     // Kotlin language support
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"         // Kotlin reflection support
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.1"     // Kotlin UI context
    implementation 'com.google.android.material:material:1.4.0'                 // Material design support lib
    implementation 'androidx.appcompat:appcompat:1.3.0-rc01'                    // basic toolbars etc.
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.3.1'            // android lifecycle callbacks
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'             // coroutines lifecycle scopes
    implementation 'androidx.cardview:cardview:1.0.0'                           // snappy cardview for lists
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'       // swipe-to-refresh layout
    implementation 'androidx.preference:preference-ktx:1.1.1'                   // preference fragment compatibility
    implementation "ch.acra:acra-mail:$acraVersion"                             // crash handler
    implementation "ch.acra:acra-dialog:$acraVersion"
    implementation "android.arch.work:work-runtime-ktx:1.0.1"                   // job scheduler
    implementation 'com.j256.ormlite:ormlite-android:5.1'                       // ORM for local storage
    implementation 'com.squareup.okhttp3:okhttp:3.14.2'                         // android http client
    implementation 'com.afollestad.material-dialogs:core:3.3.0'                 // material design for dialogs
    implementation 'com.afollestad.material-dialogs:input:3.3.0'
    implementation 'com.afollestad.material-dialogs:datetime:3.3.0'
    implementation 'com.github.Adonai:Scoops:1.5.10'                            // theming engine
    implementation 'moe.banana:moshi-jsonapi:3.5.0'                             // JSON-API parser
    implementation 'com.squareup.moshi:moshi-kotlin:1.9.2'                      // Moshi Kotlin support
    implementation 'com.squareup.moshi:moshi-adapters:1.9.2'                    // Moshi serializers collection
    implementation "io.noties.markwon:core:$markwonVersion"                     // markdown rendering
    implementation "io.noties.markwon:editor:$markwonVersion"                   // markdown editor
    implementation "io.noties.markwon:image-glide:$markwonVersion"
    implementation "io.noties.markwon:html:$markwonVersion"
    implementation "io.noties.markwon:ext-tables:$markwonVersion"
    implementation "io.noties.markwon:ext-strikethrough:$markwonVersion"
    implementation "com.github.hootsuite:nachos:1.2.0"                          // Material chip input
    //implementation 'com.github.clans:fab:1.6.4'                               // Floating action button with menu
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.8.0'
    implementation 'com.github.bumptech.glide:glide:4.11.0'                     // image processing/caching lib
    implementation 'com.auth0.android:jwtdecode:1.2.0'                          // handling JWT from server
    implementation 'com.github.stfalcon-studio:StfalconImageViewer:master-SNAPSHOT'   // embedded image viewer
    implementation 'com.github.marcoscgdev:EasyAbout:1.0.6'                     // about dialog
    implementation 'com.github.anderscheow:validator:2.2.1'                     // input text validators

    // Core library
    androidTestImplementation 'androidx.test:core:1.3.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.ext:truth:1.3.0'
    androidTestImplementation 'com.google.truth:truth:1.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'org.awaitility:awaitility:3.0.0'                        // useful wait-for-condition
    androidTestImplementation 'org.apache.commons:commons-text:1.7'                    // random string generator
}
